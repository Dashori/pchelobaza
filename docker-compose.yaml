version: "3.8"

services:
  postgres:
    image: bitnami/postgresql:14.9.0
    container_name: web-postgres
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U dashori"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_USERNAME: dashori
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_PORT: 5432
    ports: 
      - ${POSTGRESQL_PORT}:${POSTGRESQL_PORT}
    networks:
      - mynetwork

  postgres-slave:
    image: bitnami/postgresql:14.9.0
    container_name: web-postgres-slave
    volumes:
      - ./data/slave:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U dashori"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_USERNAME: dashori
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_PORT: 5433
    depends_on:
      postgres:
        condition: service_healthy 
    ports: 
      - 5433:5432
    networks:
      - mynetwork

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: web-backend
    container_name: web-backend
    command: go run cmd/main.go
    ports: 
      - ${BACKEND_PORT}
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy 
    networks:
      - mynetwork
  
  backend-ro-1:
    image: web-backend 
    container_name: web-backend-ro-1
    command: go run cmd/main.go
    ports: 
      - ${BACKEND_PORT}
    volumes:
      - ./backend:/app
    environment:
      BACKEND_PORT: 8080
      LOG_LEVEL: "debug"
      LOG_FILE: "logs.txt"
      POSTGRESQL_HOST: "postgres-slave"
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: "dashori"
      POSTGRESQL_PASSWORD: "password"
      POSTGRESQL_DB: "postgres"
    depends_on:
      postgres-slave:
        condition: service_healthy 
      backend:
        condition: service_started
    networks:
      - mynetwork

  backend-ro-2:
    image: web-backend 
    container_name: web-backend-ro-2
    command: go run cmd/main.go
    ports: 
      - ${BACKEND_PORT}
    volumes:
      - ./backend:/app
    environment:
      BACKEND_PORT: 8080
      LOG_LEVEL: "debug"
      LOG_FILE: "logs.txt"
      POSTGRESQL_HOST: "postgres-slave"
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: "dashori"
      POSTGRESQL_PASSWORD: "password"
      POSTGRESQL_DB: "postgres"
    depends_on:
      postgres-slave:
        condition: service_healthy 
      backend:
        condition: service_started
      backend-ro-1:
        condition: service_started
    networks:
      - mynetwork
  
  backend-mirror:
    image: web-backend 
    container_name: web-backend-mirror
    command: go run cmd/main.go
    environment:
      BACKEND_PORT: 8080
      LOG_LEVEL: "debug"
      LOG_FILE: "logs_mirror.txt"
      POSTGRESQL_HOST: "postgres-slave"
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: "dashori"
      POSTGRESQL_PASSWORD: "password"
      POSTGRESQL_DB: "postgres"
    ports: 
      - ${BACKEND_PORT}
    volumes:
      - ./backend:/app
    depends_on:
      postgres-slave:
        condition: service_healthy 
    networks:
      - mynetwork
  

  pgadmin:
    image: dpage/pgadmin4:7
    container_name: web-pgadmin
    env_file:
      - .env
    ports: 
      - ${PGADMIN_PORT}:${PGADMIN_PORT}
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy 
    networks:
      - mynetwork

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: web-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/static:/static
      - ./api.yaml:/static/api.yaml
      - ./images:/static/images
      - ./logs/nginx:/var/log/nginx
    ports:
      - ${NGINX_EXTERNAL_PORT}:${NGINX_PORT}
    depends_on:
      - backend
      - backend-ro-1
      - backend-ro-2
      - backend-mirror
      - pgadmin
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

